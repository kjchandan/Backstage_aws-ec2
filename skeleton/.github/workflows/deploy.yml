name: Deploy EC2 Instance

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  TF_VERSION: 1.5.0

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ASIA3J5HVWH5B6RNBLWE
        aws-secret-access-key: gEej0FbShqNIfzo8JD/H2SspbUTLrBGBr/xB8gcs
        aws-region: 'us-east-1'
        aws-session-token: IQoJb3JpZ2luX2VjEGUaCXVzLWVhc3QtMSJIMEYCIQDzQ6eLl63N+u41ejJ/aBGwlHjLrIA01NrNRlZ1YVLSRgIhAKBNmjmMB2JoHtNuFWsWSHBjxvb95mt35po8Oewxe/qKKscDCJ7//////////wEQABoMNzc3MjAzODU1ODY2Igwl1HnmM8a1OYBCKBkqmwMaEEFJmpGfW2l9O/IU4+2x+81YcpTuRVFb4cWSMpa0+qFRTXzcQb7UVAKZaU3TaFNKU+7QczELQDNePJPgQHQc8murBeYiqu9zzBC/S1pMTo4k3HQ9ZihGHGp073IzlIkLfkcbyILG1FYPsElXNkySok7b+y4ydpGS1lnmpQLQUFt3xWXQbnASD8x2jEa/oxiU3WlT3tjoVTUK/B38ciS4rDJwb5jQ7drRtj8C5Q8pmwUeKIwrXO9G0JkZKe/MYcY/OGw1yq9MqjH7zmcxPBx83qjtTbuGu/B9/W6rkVz+fssCj6jI3eadQfWYiZqWRQW6scJ/A1iOHmxGzsZDEm+cRC50UKCW+nWp6SrCnerCz7sbHcsQjlvx9mxZiWulR3CTU63PMj4zfVHOFushL5454NSl/YdHqiuY+Mzcxg/RVei1uKyWEkkTZmDD4EEg/FP+mSUFaKXwd4k6QAgzFTW5qYM3fdhz1M9GAXXFQ+uOJLpeR/H87ksuGj8M7yc1yU+MbDIxL/YUGx/I+O/HSboWDi+fQMWsplRPvG8wj/7VxAY6pQH3BzTstvei65MtYaC8ZtSw9gAgZemv5zOX0EpnpGfzlCEEgUWF3mdwc9UE7uAyJJDWL7WQ8HlW/fJe4DBP74wInKWyTySgPMEWKfpiDcCtV6mCQlksI//74Y+YxUWTJ1DMVnqN9mDe5x72fCu/yUowvj6JdzAt5yhrJklaXRqCySNwq+WdJCgT0ZXdggDu2/EyLIYCR9zW91/6Ryz11myRzxS8RPM=
       

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'push' || github.event.inputs.action == 'plan' || github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false
      continue-on-error: true

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event.inputs.action == 'apply'
      run: terraform apply -auto-approve -input=false

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: terraform destroy -auto-approve -input=false

    # - name: Get Terraform Outputs
    #   if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event.inputs.action == 'apply'
    #   id: outputs
    #   run: |
    #     echo "instance_id=$(terraform output -raw instance_id)" >> $GITHUB_OUTPUT
    #     echo "instance_public_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT
    #     echo "ssh_command=$(terraform output -raw ssh_connection_command)" >> $GITHUB_OUTPUT






